{"version":3,"sources":["components/NavigationBar/NavigationBar.module.css","components/Dialogs/DialogsItem/DialogsItem.module.css","components/Login/Login.module.css","components/MainContent/Posts/lPosts/Posts.module.css","components/Dialogs/Dialogs.module.css","components/Users/Users.module.css","components/Header/Header.module.css","components/MainContent/ProfileInfo/ProfileInfo.module.css","components/MainContent/Posts/lPosts/NewPost/NewPost.module.css","components/Dialogs/Message/Message.module.css","reportWebVitals.ts","api/api.ts","redux/users_reducer.ts","redux/mainContent_reducer.ts","redux/dialogsPage_reducer.ts","redux/friendsNavigationBar_reducer.ts","redux/auth_reducer.ts","redux/app_reducer.ts","redux/reduxStore.ts","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/NavigationBar/NavigationBar.tsx","assets/images/ironman-marvel-super-hero-earth-saver-avenger.png","components/Users/Users.tsx","assets/images/Spin-1s-200px.svg","components/common/Preloader/Preloader.tsx","redux/users_selectors.ts","components/Users/UsersContainer.tsx","components/MainContent/ProfileInfo/ProfileStatusWithHook.tsx","components/MainContent/ProfileInfo/ProfileInfo.tsx","components/MainContent/Posts/lPosts/NewPost/NewPost.tsx","components/MainContent/Posts/lPosts/Posts.tsx","components/MainContent/Posts/lPosts/PostsContainer.tsx","components/MainContent/MainContent.tsx","hoc/withAuthRedirect.tsx","components/MainContent/ProfileInfo/MainContentContainer.tsx","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/LoginForm.tsx","components/Login/Login.tsx","App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","withCredentials","baseURL","headers","userAPI","pageNumber","pageSize","get","response","data","userId","post","delete","console","warn","profileAPI","getUserProfile","getUserStatus","updateUserStatus","status","put","authAPI","email","password","rememberMe","setStatus","type","setCurrentPage","currentPage","toggleIsFetching","isFetching","toggleFollowingFetching","toggle","initialState","users","totalUsersCount","followingInProgress","setUserProfile","userProfiles","usersProfiles","postsData","id","message","likes","dialogsData","name","avatar","messagesDataPosts","friendsNavigationBar","friends","setAuthUserData","login","isAuth","payload","undefined","authError","getAuthUserData","dispatch","res","resultCode","logIn","errorMessage","messages","lenght","initialized","rootReducer","combineReducers","mainContent","state","action","stateCopy","newPost","dialogsPage","newMessage","navigationBar","usersPage","map","u","userID","followed","newUsers","count","filter","auth","app","store","createStore","applyMiddleware","thunkMiddleware","window","News","Music","Settings","NavigationBar","className","s","nav","item","to","activeClassName","activeLink","Users","props","pagesCount","Math","ceil","pages","i","push","p","selectedPage","onClick","onPageChanged","toString","src","photos","small","userPhoto","alt","disabled","some","unFollow","follow","Preloader","preloader","getUsers","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","this","React","Component","compose","connect","page","items","totalCount","followSuccess","unFollowSuccess","ProfileStatusWithHook","useState","editMode","setEditMode","useEffect","onDoubleClick","value","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","ProfileInfo","profile","descriptionBlock","large","fullName","aboutMe","lookingForAJob","contacts","github","NewPost","img","Posts","memo","log","postsElements","postsBlock","callback","addPost","buttonTitle","posts","AddPostForm","initialValues","validate","values","errors","length","onSubmit","setSubmitting","touched","handleChange","handleBlur","handleSubmit","isSubmitting","style","border","component","placeholder","errorText","PostsContainer","MainContent","MapStateToProps","withAuthRedirect","restProps","MainContentContainer","match","params","authorizedUserID","history","getUsersProfile","withRouter","DialogItem","dialog","active","user","userAvatar","userName","Message","Dialogs","dialogsElements","d","messagesElements","m","tableDialogs","dialogsItems","addMessage","AddMessageForm","alert","JSON","stringify","DialogsContainer","Header","header","loginBlock","authUsersData","logOut","HeaderContainer","LoginForm","useDispatch","errorMessageFromServer","useSelector","getState","errorInput","App","initializeApp","path","render","Promise","all","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d156beba.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavigationBar_nav__3T_Q_\",\"item\":\"NavigationBar_item__2WusY\",\"activeLink\":\"NavigationBar_activeLink__3g1O2\",\"forFriendsBar\":\"NavigationBar_forFriendsBar__3pbat\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"DialogsItem_active__1CByC\",\"dialog\":\"DialogsItem_dialog__10Cxi\",\"userAvatar\":\"DialogsItem_userAvatar__2uexI\",\"user\":\"DialogsItem_user__hDg_H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorInput\":\"Login_errorInput__T9LbL\",\"errorText\":\"Login_errorText__iuBRX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Posts_item__3c2TU\",\"postsBlock\":\"Posts_postsBlock__2IEcS\",\"posts\":\"Posts_posts__3IuBo\",\"errorInput\":\"Posts_errorInput__6f7nX\",\"errorText\":\"Posts_errorText__EEjos\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableDialogs\":\"Dialogs_tableDialogs__1U6dp\",\"dialogsItems\":\"Dialogs_dialogsItems__2-5Hy\",\"active\":\"Dialogs_active__2m3TZ\",\"dialog\":\"Dialogs_dialog__MkstQ\",\"messages\":\"Dialogs_messages__2hjt0\",\"message\":\"Dialogs_message__kdskK\",\"errorInput\":\"Dialogs_errorInput__1c883\",\"errorText\":\"Dialogs_errorText__2AH3O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__3EjdH\",\"selectedPage\":\"Users_selectedPage__A5Umt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3yJ3n\",\"loginBlock\":\"Header_loginBlock__19NIM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"themeImg\":\"ProfileInfo_themeImg__ltVV3\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__P8cTM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"NewPost_img__30RhW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__3HYaI\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"cc3df63a-f5f2-455f-9c95-f8ce5b37aa87\",\r\n    }\r\n})\r\n\r\nexport const userAPI = {\r\n    getUsers(pageNumber: number = 1, pageSize: number = 10) {\r\n        return instance\r\n            .get(`users?page=${pageNumber}&count=${pageSize}`)\r\n            .then(response => response.data);\r\n    },\r\n\r\n    followUser(userId: number) {\r\n        return instance\r\n            .post(`follow/${userId}`)\r\n            //мы отправляем в гет запросе параметр, в котором указываем, что мы авторизованы\r\n            //т.е. вместе с кукис\r\n            //браузер не отправляем куку автоматически\r\n            //только с данным параметром\r\n            .then(response => response.data);\r\n    },\r\n\r\n    unFollowUser(userId: number) {\r\n        return instance\r\n            .delete(`follow/${userId}`)\r\n            .then(response => response.data);\r\n    },\r\n\r\n    getUserProfile(userId: string) {\r\n        console.warn(\"Obsolete method. Please use profileApi object.\")\r\n        return profileAPI.getUserProfile(userId);\r\n    },\r\n\r\n}\r\n\r\nexport const profileAPI = {\r\n\r\n    getUserProfile(userId: string) {\r\n\r\n        return instance\r\n            .get(`profile/` + userId)\r\n            .then(response => response.data);\r\n    },\r\n    getUserStatus(userId: string) {\r\n        debugger\r\n        return instance\r\n            .get(`profile/status/` + userId);\r\n    },\r\n    updateUserStatus(status: string) {\r\n        return instance\r\n            .put(`profile/status`, {status: status});\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n\r\n    authMe() {\r\n        return instance\r\n            .get(`auth/me`)\r\n            .then(response => response.data);\r\n        //мы отправляем в гет запросе параметр, в котором указываем, что мы авторизованы\r\n        //т.е. вместе с кукис\r\n        //браузер не отправляем куку автоматически\r\n        //только с данным параметром\r\n    },\r\n\r\n    logIn(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post('auth/login', {email, password, rememberMe})\r\n    },\r\n    logOut() {\r\n        return instance.delete('auth/login');\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {userAPI} from \"../api/api\";\r\n\r\n\r\nexport const setStatus = (status: string) => {\r\n    return {\r\n        type: \"SET_STATUS\",\r\n        status\r\n    } as const\r\n}\r\n\r\nexport const followSuccess = (userID: number) => {\r\n    return {\r\n        type: \"FOLLOW\",\r\n        userID\r\n    } as const\r\n}\r\nexport const unFollowSuccess = (userID: number) => {\r\n    return {\r\n        type: \"UNFOLLOW\",\r\n        userID\r\n    } as const\r\n}\r\nexport const setUsers = (newUsers: UserTypes[]) => {\r\n    return {\r\n        type: \"SET_USERS\",\r\n        newUsers\r\n    } as const\r\n}\r\n\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: \"SET_CURRENT_PAGE\",\r\n        currentPage\r\n    } as const\r\n}\r\n\r\nexport const setTotalUsersCount = (count: number) => {\r\n    return {\r\n        type: \"SET_TOTAL_USERS_COUNT\",\r\n        count\r\n    } as const\r\n}\r\n\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: \"TOGGLE_IS_FETCHING\",\r\n        isFetching\r\n    } as const\r\n}\r\nexport const toggleFollowingFetching = (toggle: boolean, userId: number) => {\r\n    return {\r\n        type: \"TOGGLE_FOLLOWING_IS_FETCHING\",\r\n        userId,\r\n        toggle,\r\n    } as const\r\n}\r\nexport type UserTypes = {\r\n    followed: boolean\r\n    id: number\r\n    name: string\r\n    photos: {\r\n        small: string | null,\r\n        large: string | null\r\n    }\r\n    status: string | null\r\n    uniqueUrlName: string | null\r\n};\r\n\r\nexport type UsersPropTypes = {\r\n    users: Array<UserTypes>\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: number[],\r\n};\r\n\r\nconst initialState: UsersPropTypes = {\r\n    users: [],\r\n    // totalCount:\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [],\r\n};\r\n\r\nexport type UserReducerActionsType =\r\n    | ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unFollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingFetching>;\r\n\r\n\r\nexport const users_reducer = (state: UsersPropTypes = initialState, action: UserReducerActionsType): UsersPropTypes => {\r\n\r\n    switch (action.type) {\r\n        case \"FOLLOW\" : {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true};\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        }\r\n        case \"UNFOLLOW\": {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false};\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        }\r\n        case \"SET_USERS\": {\r\n            return {...state, users: action.newUsers}\r\n        }\r\n        case \"SET_CURRENT_PAGE\": {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case \"SET_TOTAL_USERS_COUNT\": {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case \"TOGGLE_IS_FETCHING\": {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case \"TOGGLE_FOLLOWING_IS_FETCHING\": {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.toggle\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getUsersThunkCreator = (page: number, pageSize: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        //TODO 81 lesson, при перерисовке сохраням данную страницу в стэйт\r\n        dispatch(setCurrentPage(page));\r\n\r\n        userAPI.getUsers(page, pageSize).then(data => {\r\n            dispatch(toggleIsFetching(false));\r\n\r\n            dispatch(setUsers(data.items));\r\n            dispatch(setTotalUsersCount(data.totalCount));\r\n        })\r\n    }\r\n}\r\n\r\nexport const followThunkCreator = (userID: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingFetching(true, userID));\r\n\r\n        userAPI.followUser(userID)\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    dispatch(followSuccess(userID))\r\n                }\r\n            })\r\n        dispatch(toggleFollowingFetching(false, userID));\r\n    }\r\n}\r\n\r\nexport const unFollowThunkCreator = (userID: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingFetching(true, userID));\r\n        userAPI.unFollowUser(userID)\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    dispatch(unFollowSuccess(userID))\r\n                }\r\n            })\r\n        dispatch(toggleFollowingFetching(false, userID));\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {profileAPI, userAPI} from \"../api/api\";\r\nimport {setStatus} from \"./users_reducer\";\r\n\r\n\r\nexport const addPost = (newPost: string) => ({type: \"ADD_POST\", newPost} as const);\r\n\r\nexport const setUserProfile = (userProfiles: ProfileType) => {\r\n    return {\r\n        type: \"SET_USER_PROFILE\",\r\n        usersProfiles: userProfiles,\r\n    } as const\r\n}\r\n\r\nexport type ProfileType = {\r\n    userId: number,\r\n    aboutMe: string,\r\n    //lookingForAJob: number,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: null | string,\r\n    fullName: string,//уточнить всегда ли есть имя\r\n    contacts: {\r\n        github: null | string,\r\n        vk: null | string,\r\n        facebook: null | string,\r\n        instagram: null | string,\r\n        twitter: null | string,\r\n        website: null | string,\r\n        youtube: null | string,\r\n        mainLink: null | string,\r\n    }\r\n    photos:\r\n        {\r\n            small: string,\r\n            large: string,\r\n        }\r\n}\r\n\r\nexport type PostsDataArrayPropTypes = {\r\n    postsData: Array<NewPostType>,\r\n    usersProfiles: ProfileType | null,\r\n    status: string,\r\n}\r\n\r\nexport type NewPostType = {\r\n    id: number,\r\n    message: string,\r\n    likes: number\r\n}\r\n\r\nconst initialState: PostsDataArrayPropTypes = {\r\n    postsData: [\r\n        {id: 1, message: 'Hello!How are you?', likes: 10},\r\n        {id: 2, message: 'I saw you yesterday', likes: 30},\r\n        {id: 3, message: 'Buy some potatoes?', likes: 0},\r\n        {id: 4, message: 'I want cheese', likes: 10},\r\n        {id: 5, message: 'Hurry', likes: 100}\r\n    ],\r\n    usersProfiles: null,\r\n    status: \"\",\r\n};\r\n\r\nexport type MainContentReducerActionsType =\r\n    ReturnType<typeof addPost>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatus>;\r\n\r\nexport const mainContent_reducer = (state: PostsDataArrayPropTypes = initialState, action: MainContentReducerActionsType): PostsDataArrayPropTypes => {\r\n    switch (action.type) {\r\n        case \"ADD_POST\": {\r\n            let stateCopy = {\r\n                ...state, postsData: [...state.postsData,\r\n                    {id: 5, message: action.newPost, likes: 155}]\r\n            };\r\n            return stateCopy\r\n        }\r\n        case \"SET_USER_PROFILE\": {\r\n            return {...state, usersProfiles: action.usersProfiles}\r\n        }\r\n        case \"SET_STATUS\": {\r\n            return {...state, status: action.status}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const getUserProfileThunkCreator = (userID: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        userAPI.getUserProfile(userID)\r\n            .then(data => {\r\n                dispatch(setUserProfile(data));\r\n            })\r\n    }\r\n}\r\n\r\nexport const getUserStatusTC = (userID: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.getUserStatus(userID)\r\n            .then(response => {\r\n                debugger\r\n                dispatch(setStatus(response.data));\r\n            })\r\n    }\r\n}\r\n\r\nexport const updateUserStatusTC = (status: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.updateUserStatus(status)\r\n            .then(response => {\r\n                debugger\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setStatus(status))\r\n                }\r\n            })\r\n    }\r\n}","export const addMessage = (newMessage: string) => {\r\n    return {\r\n        type: \"ADD_MESSAGE\",\r\n        newMessage\r\n    } as const\r\n}\r\n\r\nexport type DialogsPropTypes = {\r\n    dialogsData: Array<DialogItemPropTypes>,\r\n    messagesDataPosts: Array<MessagePropTypes>,\r\n\r\n}\r\nexport type MessagePropTypes = {\r\n    id: number,\r\n    message: string,\r\n};\r\nexport type DialogItemPropTypes = {\r\n    id: number,\r\n    name: string,\r\n    avatar: string\r\n};\r\n\r\nconst initialState = {\r\n    dialogsData: [\r\n        {id: 1, name: \"Yauheni\", avatar: \"https://twitchgid.ru/wp-content/uploads/2020/11/avi-19.jpeg\"},\r\n        {id: 2, name: \"Nina\", avatar: \"https://twitchgid.ru/wp-content/uploads/2020/11/avi-10.jpeg\"},\r\n        {id: 3, name: \"Alina\", avatar: \"https://twitchgid.ru/wp-content/uploads/2020/11/avi-12.jpeg\"},\r\n        {id: 4, name: \"Nasty\", avatar: \"https://twitchgid.ru/wp-content/uploads/2020/11/avi-18.jpeg\"},\r\n        {id: 5, name: \"Ira\", avatar: \"https://twitchgid.ru/wp-content/uploads/2020/11/avi-6.jpeg\"},\r\n    ],\r\n    messagesDataPosts: [\r\n        {id: 1, message: \"Hi sweet!\"},\r\n        {id: 2, message: \"How are you?\"},\r\n        {id: 3, message: \"Go home!\"},\r\n        {id: 4, message: \"Try again tomorrow.\"},\r\n        {id: 5, message: \"No.\"},\r\n    ],\r\n};\r\n\r\n\r\nexport type DialogsReducerActionsType = ReturnType<typeof addMessage>;\r\n\r\nexport const dialogsPage_reducer = (state: DialogsPropTypes = initialState, action: DialogsReducerActionsType): DialogsPropTypes => {\r\n\r\n    switch (action.type) {\r\n        case \"ADD_MESSAGE\": {\r\n            return {\r\n                ...state,\r\n                messagesDataPosts:\r\n                    [...state.messagesDataPosts,\r\n                        {id: 6, message: action.newMessage}]\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","export type friendsNavigationBarType = {\r\n    friendsNavigationBar:\r\n        { friends: Array<HumanPropTypes> }\r\n};\r\nexport type HumanPropTypes = {\r\n    id: number,\r\n    name: string,\r\n    avatar: string\r\n}\r\n\r\n\r\nconst initialState: friendsNavigationBarType = {\r\n    friendsNavigationBar: {\r\n        friends: [\r\n            {id: 1, name: \"Jeka\", avatar: \"https://twitchgid.ru/wp-content/uploads/2020/11/avi-6.jpeg\"},\r\n            {id: 2, name: \"Lesya\", avatar: \"https://twitchgid.ru/wp-content/uploads/2020/11/avi-1.jpeg\"},\r\n            {id: 3, name: \"Vera\", avatar: \"https://twitchgid.ru/wp-content/uploads/2020/11/avi-16.jpeg\"}]\r\n    }\r\n}\r\n\r\n\r\nexport const friendsNavigationBar_reducer = (state: friendsNavigationBarType = initialState): friendsNavigationBarType => {\r\n\r\n    return state;\r\n}\r\n\r\n\r\n","import {ActionsType, AppStateType} from \"./reduxStore\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\"\r\n\r\nexport const setAuthUserData = (userId: string | undefined, login: string | null, email: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: \"SET_USER_DATA\",\r\n        payload: {userId, login, email, isAuth},\r\n    } as const\r\n}\r\nexport const setAuthErrorServer = (authError: string) => {\r\n    return {\r\n        type: \"SET_AUTH_ERROR_RES_FROM_SERVER\",\r\n        authError,\r\n    } as const\r\n}\r\n\r\nexport type AuthPropTypes = {\r\n    userId: undefined | string,\r\n    login: null | string,\r\n    email: null | string,\r\n    isAuth: boolean,\r\n    authError: string | null,\r\n};\r\n\r\nconst initialState = {\r\n    userId: undefined,\r\n    login: null,\r\n    email: null,\r\n    isAuth: false,\r\n    authError: null,\r\n};\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>;\r\ntype ThunkReturnType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>;\r\n\r\nexport type AuthReducerActionsType =\r\n    | ReturnType<typeof setAuthUserData>\r\n    | ReturnType<typeof setAuthErrorServer>;\r\n\r\nexport const auth_reducer = (state: AuthPropTypes = initialState, action: AuthReducerActionsType): AuthPropTypes => {\r\n\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\" : {\r\n            debugger\r\n            return {...state, ...action.payload}\r\n        }\r\n        case \"SET_AUTH_ERROR_RES_FROM_SERVER\": {\r\n            return {...state, authError: action.authError}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const getAuthUserData = (): ThunkType =>\r\n    (dispatch) => {\r\n        authAPI.authMe()\r\n            .then(res => {\r\n                if (res.resultCode === 0) {\r\n                    let {id, login, email} = res.data\r\n                    dispatch(setAuthUserData(id, login, email, true))\r\n                }\r\n            })\r\n    }\r\n\r\nexport const logIn = (email: string, password: string, rememberMe: boolean)\r\n    : ThunkType =>\r\n    (dispatch) => {\r\n        authAPI.logIn(email, password, rememberMe)\r\n            .then((res) => {\r\n                debugger\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(getAuthUserData())\r\n                    debugger\r\n                } else {\r\n                    let errorMessage = res.data.messages.lenght > 0 ? res.data.messages[0] : \"Some error with auth\";\r\n                    dispatch(setAuthErrorServer(errorMessage))\r\n                }\r\n            })\r\n    }\r\n\r\nexport const logOut = (): ThunkType =>\r\n    (dispatch) => {\r\n        authAPI.logOut()\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setAuthUserData(undefined, null, null, false))\r\n                }\r\n            })\r\n    }","import {getAuthUserData} from \"./auth_reducer\";\r\n\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {ActionsType, AppStateType} from \"./reduxStore\";\r\n\r\n\r\nconst initialState = {\r\n    initialized: false,\r\n};\r\n\r\nexport type appPropTypes = {\r\n    initialized: boolean,\r\n};\r\n\r\nexport const initializedSuccess = () => {\r\n    return {\r\n        type: \"INITIALIZED_SUCCESS\",\r\n    } as const\r\n}\r\n\r\nexport type AppReducerActionTypes = ReturnType<typeof initializedSuccess>;\r\n\r\nexport const app_reducer = (state: appPropTypes = initialState, action: AppReducerActionTypes): appPropTypes => {\r\n    switch (action.type) {\r\n        case \"INITIALIZED_SUCCESS\":\r\n            return {...state, initialized: true}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>;\r\n\r\nexport const initializeApp = (): ThunkType =>\r\n    (dispatch) => {\r\n        Promise.all([dispatch(getAuthUserData())])\r\n            .then(() => {\r\n                dispatch(initializedSuccess())\r\n            })\r\n    }\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {mainContent_reducer, MainContentReducerActionsType} from \"./mainContent_reducer\";\r\nimport {dialogsPage_reducer, DialogsReducerActionsType} from \"./dialogsPage_reducer\";\r\nimport {friendsNavigationBar_reducer} from \"./friendsNavigationBar_reducer\";\r\nimport {UserReducerActionsType, users_reducer} from \"./users_reducer\";\r\nimport {auth_reducer, AuthReducerActionsType} from \"./auth_reducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {app_reducer, AppReducerActionTypes} from \"./app_reducer\";\r\n\r\n\r\nexport type ActionsType =\r\n    AuthReducerActionsType\r\n    | UserReducerActionsType\r\n    | MainContentReducerActionsType\r\n    | DialogsReducerActionsType\r\n    | AppReducerActionTypes;\r\n\r\n\r\nconst rootReducer = combineReducers(\r\n    {\r\n        mainContent: mainContent_reducer,\r\n        dialogsPage: dialogsPage_reducer,\r\n        navigationBar: friendsNavigationBar_reducer,\r\n        usersPage: users_reducer,\r\n        auth: auth_reducer,\r\n        app: app_reducer,\r\n    }\r\n)\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n//создали встроенный объект store в redux, помним про типизацию\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from \"react\";\r\n\r\nexport const News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\n\r\nexport const Music=()=>{\r\n    return(\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\n\r\nexport const Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport s from './NavigationBar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Friend} from \"./Friend/Friend\";\r\nimport {HumanPropTypes} from \"../../redux/friendsNavigationBar_reducer\";\r\n\r\n\r\nexport const NavigationBar: React.FC = () => {\r\n\r\n    /*  let friendElements = props.arrayFriends.map(f => <Friend\r\n          key={f.id}\r\n          id={f.id}\r\n          name={f.name}\r\n          avatar={f.avatar}/>);*/\r\n\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item}`}>\r\n                <NavLink to=\"/dialogsPage\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={`${s.item}`}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={`${s.item}`}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={`${s.item}`}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n            <div className={`${s.item}`}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n\r\n            {/*  <div className={s.forFriendsBar}>\r\n                <h1>Friends</h1>\r\n                <div>{friendElements}</div>\r\n            </div>*/}\r\n\r\n        </nav>\r\n    );\r\n}\r\n\r\n\r\n/*\r\nexport const NavigationBar: React.FC<NavigationBarPropTypes>  = () => {\r\n\r\n    let friendElements = props.arrayFriends.map(f => <Friend\r\n        key={f.id}\r\n        id={f.id}\r\n        name={f.name}\r\n        avatar={f.avatar}/>);\r\n\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item}`}>\r\n                <NavLink to=\"dialogsPage\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={`${s.item}`}>\r\n                <NavLink to=\"news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={`${s.item}`}>\r\n                <NavLink to=\"music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={`${s.item}`}>\r\n                <NavLink to=\"settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n\r\n            <div className={s.forFriendsBar}>\r\n                <h1>Friends</h1>\r\n                <div>{friendElements}</div>\r\n            </div>\r\n\r\n        </nav>\r\n    );\r\n}*/\r\n","export default __webpack_public_path__ + \"static/media/ironman-marvel-super-hero-earth-saver-avenger.f976e147.png\";","import React from \"react\";\r\nimport {UsersConnectMapPropTypes} from \"./UsersContainer\";\r\nimport s from \"./Users.module.css\"\r\nimport userPhoto from \"./../../assets/images/ironman-marvel-super-hero-earth-saver-avenger.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype UsersAPIComponentPropType = {\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\nexport const Users: React.FC<UsersConnectMapPropTypes & UsersAPIComponentPropType> = (props) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {pages.map(p => {\r\n                    return <span key={p.toString()}\r\n                                 className={(props.currentPage === p) ? s.selectedPage : \"\"}\r\n                                 onClick={() => {\r\n                                     props.onPageChanged(p)\r\n                                 }}>{p}</span>\r\n                })}\r\n            </div>\r\n            {props.users.map((u) =>\r\n\r\n                <div key={u.id}>\r\n                            <span>\r\n                        <div>\r\n                            <NavLink to={\"/profile/\" + u.id}><img src={u.photos.small ? u.photos.small : userPhoto}\r\n                                                                  alt=\"yourFace\"\r\n                                                                  className={s.userPhoto}/></NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {u.followed ?\r\n                                <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {props.unFollow(u.id)}}>Unfollow</button>\r\n                                : <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {props.follow(u.id)}}>Follow</button>}\r\n                        </div>\r\n                    </span>\r\n                    <span>\r\n                                <span>\r\n                                    <div>{u.name}</div>\r\n                                    <div>{u.status}</div>\r\n                                </span>\r\n                                <span>\r\n                                    <div>{}</div>\r\n                                    <div>{}</div>\r\n                                </span>\r\n                            </span>\r\n                </div>\r\n            )\r\n            }\r\n        </div>\r\n    );\r\n\r\n}\r\n","export default __webpack_public_path__ + \"static/media/Spin-1s-200px.b988d774.svg\";","import preloader from \"../../../assets/images/Spin-1s-200px.svg\";\r\nimport React from \"react\";\r\n\r\n\r\nexport const Preloader: React.FC = () => {\r\n    return (<div>\r\n        <img src={preloader} alt=\"\"/>\r\n    </div>)\r\n}","import {AppStateType} from \"./reduxStore\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true)\r\n})\r\n\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}","import {AppStateType} from \"../../redux/reduxStore\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    followThunkCreator, getUsersThunkCreator,\r\n    setCurrentPage,\r\n    toggleFollowingFetching, unFollowThunkCreator,\r\n\r\n    UserTypes\r\n} from \"../../redux/users_reducer\";\r\nimport React from \"react\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/users_selectors\";\r\n\r\n\r\nclass UsersContainer extends React.Component<UsersConnectMapPropTypes> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize);\r\n\r\n        //TODO: тут ли дожна быть устанановлена пагинация?\r\n        this.props.setCurrentPage(pageNumber)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Users totalUsersCount={this.props.totalUsersCount}\r\n                       users={this.props.users}\r\n                       setCurrentPage={this.props.setCurrentPage}\r\n                       pageSize={this.props.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       onPageChanged={this.onPageChanged}\r\n                       isFetching={this.props.isFetching}\r\n                       followingInProgress={this.props.followingInProgress}\r\n                       getUsers={this.props.getUsers}\r\n                       follow={this.props.follow}\r\n                       unFollow={this.props.unFollow}\r\n                /></>)\r\n    }\r\n}\r\n\r\ntype MapStatePropTypes = {\r\n    users: UserTypes[],\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: number[],\r\n}\r\n\r\nlet MapStateToProps = (state: AppStateType): MapStatePropTypes => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    }\r\n}\r\n/*let MapStateToProps = (state: AppStateType): MapStatePropTypes => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n    }\r\n}*/\r\n\r\ntype MapDispatchToPropsType = {\r\n    setCurrentPage: (currentPage: number) => void,\r\n    getUsers: (currentPage: number, pageSize: number) => void,\r\n    follow: (userID: number) => void,\r\n    unFollow: (userID: number) => void,\r\n}\r\n\r\nexport type UsersConnectMapPropTypes = MapStatePropTypes & MapDispatchToPropsType;\r\n\r\n/*export default connect(MapStateToProps,\r\n    {\r\n        setCurrentPage,\r\n        toggleFollowingFetching,\r\n        getUsers: getUsersThunkCreator,\r\n        follow:followThunkCreator,\r\n        unFollow:unFollowThunkCreator\r\n    })(UsersContainer);*/\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(MapStateToProps,\r\n        {\r\n            setCurrentPage,\r\n            toggleFollowingFetching,\r\n            getUsers: getUsersThunkCreator,\r\n            follow: followThunkCreator,\r\n            unFollow: unFollowThunkCreator\r\n        }),\r\n)(UsersContainer)\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusPropTypes = {\r\n    status: string,\r\n    updateStatus: (status: string) => void,\r\n}\r\n\r\nexport const ProfileStatusWithHook: React.FC<ProfileStatusPropTypes> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"------\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input value={status} onChange={onStatusChange} autoFocus={true}\r\n                       onBlur={deActivateEditMode}/>\r\n            </div>\r\n\r\n            }\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHook;","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport {ProfileType} from \"../../../redux/mainContent_reducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHook from \"./ProfileStatusWithHook\";\r\n\r\ntype ProfileInfoPropTypes = {\r\n    profile: ProfileType | null,\r\n    status: string,\r\n    updateStatus: (status: string) => void,\r\n}\r\n\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoPropTypes> = (props) => {\r\n    if (!props.profile) {\r\n        return (<Preloader/>)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/*<div>\r\n                <img alt=\"#\" className={s.themeImg}\r\n                     src='https://st2.depositphotos.com/1021014/7859/i/600/depositphotos_78597430-stock-photo-nature-background-panorama.jpg'/>\r\n            </div>*/}\r\n            <div className={s.descriptionBlock}>\r\n\r\n                <img src={props.profile.photos.large} alt=\"\"/>\r\n\r\n                <ProfileStatusWithHook status={props.status} updateStatus={props.updateStatus}/>\r\n\r\n                <div>fullName: {props.profile.fullName}</div>\r\n                <div>aboutMe: {props.profile.aboutMe}</div>\r\n                <div>lookingForAJob:{props.profile.lookingForAJob}</div>\r\n                <div>github: {props.profile.contacts.github}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport s from './NewPost.module.css';\r\nimport {NewPostType} from \"../../../../../redux/mainContent_reducer\";\r\n\r\n\r\nexport const NewPost = (props: NewPostType) => {\r\n    return (\r\n        <div>\r\n            <img className={s.img}\r\n                 src=\"https://www.meme-arsenal.com/memes/1217413852947b0ec148f82a87e89ddc.jpg\" alt=\"postImage\"/>\r\n            {props.message}\r\n            <div>Likes {props.likes}</div>\r\n\r\n\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport s from './Posts.module.css';\r\nimport {NewPost} from \"./NewPost/NewPost\";\r\nimport {PostsConnectMapPropTypes} from \"./PostsContainer\";\r\nimport {Field, Formik, FormikErrors} from \"formik\";\r\n\r\nexport const Posts: React.FC<PostsConnectMapPropTypes> = React.memo((props) => {\r\n    console.log(\"RENDER functional component Posts\")\r\n    const postsElements = props.postsData.map(p => <NewPost key={p.id}\r\n                                                            id={p.id}\r\n                                                            message={p.message}\r\n                                                            likes={p.likes}/>);\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div className={s.item}>\r\n                <AddPostForm callback={props.addPost} buttonTitle={\"Send Post\"}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\ntype AddPostFormType = {\r\n    callback: (newMessage: string) => void,\r\n    buttonTitle: string,\r\n}\r\n\r\ntype FormValues = {\r\n    post: string\r\n}\r\n\r\nconst AddPostForm: React.FC<AddPostFormType> = (props) => {\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{post: ''}}\r\n            validate={values => {\r\n                let errors: FormikErrors<FormValues> = {};\r\n                if (!values.post) {\r\n                    errors.post = \"Required\";\r\n                } else if (values.post.length > 15) {\r\n                    errors.post = \"Post must be less 15 symbols\"\r\n                }\r\n\r\n                return errors;\r\n            }}\r\n            onSubmit={(values, {setSubmitting}) => {\r\n                // alert(JSON.stringify(values));\r\n                debugger\r\n                setSubmitting(false);\r\n                props.callback(values.post)\r\n            }}\r\n        >\r\n            {({\r\n                  values,\r\n                  errors,\r\n                  touched,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                  isSubmitting,\r\n                  /* and other goodies */\r\n              }) => (\r\n                <form onSubmit={handleSubmit}>\r\n                    {/*свойство нэйм, это то, что мы туда запихиваем!*/}\r\n                    <div>\r\n                        <Field\r\n                            /*    error={errors.post && touched.post}*/\r\n                            style={errors.post && touched.post && {border: '1px solid red'}}\r\n                            /*classname={errors.post && touched.post ? s.errorInput : \"\"}*/\r\n                            name={\"post\"}\r\n                            component={\"textarea\"}\r\n                            placeholder={\"write your post\"}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.post}/></div>\r\n\r\n                    {touched.post && errors.post && <div className={s.errorText}>{errors.post}</div>}\r\n\r\n                    <div>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            {props.buttonTitle}\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}","import React from \"react\";\r\nimport {addPost, NewPostType} from \"../../../../redux/mainContent_reducer\";\r\nimport {AppStateType} from \"../../../../redux/reduxStore\";\r\nimport {Posts} from \"./Posts\";\r\n\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\n\r\nclass PostsContainer extends React.Component<PostsConnectMapPropTypes> {\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Posts addPost={this.props.addPost}\r\n                       postsData={this.props.postsData}/>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: () => void,\r\n}\r\ntype MapStatePropTypes = {\r\n    postsData: Array<NewPostType>\r\n}\r\n\r\nexport type PostsConnectMapPropTypes = MapStatePropTypes & MapDispatchToPropsType;\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropTypes => {\r\n    return {\r\n        postsData: state.mainContent.postsData\r\n    }\r\n}\r\n\r\n\r\n/*let mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: () => {\r\n            dispatch(addPostAC())\r\n        },\r\n        changeNewTextCallback: (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n            const post = e.currentTarget.value;\r\n            dispatch(changeNewTextCallbackAC(post));\r\n        }\r\n    }\r\n}*/\r\n\r\n/*export default connect(mapStateToProps, {addPost, changeNewTextCallback})(PostsContainer);*/\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {addPost})\r\n)(PostsContainer);\r\n\r\n","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport PostsContainer from \"./Posts/lPosts/PostsContainer\";\r\nimport {ProfileType} from \"../../redux/mainContent_reducer\";\r\n\r\ntype MainContentPropTypes = {\r\n    profile: ProfileType | null,\r\n    status: string,\r\n    updateStatus: (status: string) => void,\r\n}\r\n\r\nexport const MainContent: React.FC<MainContentPropTypes> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}/>\r\n            <PostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n","import React, {ComponentType} from \"react\";\r\nimport {AppStateType} from \"../redux/reduxStore\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStatePropTypes = {\r\n    isAuth: boolean,\r\n}\r\n\r\nconst MapStateToProps = (state: AppStateType): MapStatePropTypes => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropTypes) => {\r\n\r\n        let {isAuth, ...restProps} = props;\r\n\r\n        if (!isAuth) {\r\n            return <Redirect to={\"/authMe\"}/>\r\n        }\r\n\r\n        return <Component {...restProps as T}/>\r\n\r\n    }\r\n    return connect(MapStateToProps)(RedirectComponent)\r\n}","import React from \"react\";\r\nimport {MainContent} from \"../MainContent\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getUserProfileThunkCreator,\r\n    getUserStatusTC,\r\n    ProfileType,\r\n    setUserProfile, updateUserStatusTC\r\n} from \"../../../redux/mainContent_reducer\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n//после типизации withRouter изменили тип с MainContentConnectMapPropTypes на PropsType\r\n//т.к. добавились пропсы от withRouter\r\nclass MainContentContainer extends React.Component <PropsType> {\r\n\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        //если тут не определил\r\n        if (!userId) {\r\n            //если тут не определил\r\n\r\n            userId = this.props.authorizedUserID;\r\n            if(!userId){\r\n                //если тут не определил\r\n\r\n                this.props.history.push('/authMe')\r\n            }\r\n\r\n        }\r\n            userId && this.props.getUsersProfile(userId);\r\n            userId && this.props.getUserStatus(userId);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (<div>\r\n            <MainContent {...this.props}\r\n                         profile={this.props.usersProfiles}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateUserStatus}/>\r\n        </div>)\r\n    }\r\n}\r\n\r\ntype MapStatePropTypes = {\r\n    usersProfiles: ProfileType | null,\r\n    status: string,\r\n    authorizedUserID: undefined | string,\r\n    isAuth: boolean,\r\n}\r\ntype MapDispatchToPropsType = {\r\n    setUserProfile: (userProfiles: ProfileType) => void,\r\n    getUsersProfile: (userID: string) => void,\r\n    getUserStatus: (userID: string) => void,\r\n    updateUserStatus: (status: string) => void,\r\n}\r\n\r\n//withRouter типизация\r\ntype PathParamsType = {\r\n    userId: string|undefined,\r\n}\r\n\r\nlet MapStateToProps = (state: AppStateType): MapStatePropTypes => {\r\n    return {\r\n        usersProfiles: state.mainContent.usersProfiles,\r\n        status: state.mainContent.status,\r\n        authorizedUserID: state.auth.userId,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport type MainContentConnectMapPropTypes = MapStatePropTypes & MapDispatchToPropsType;\r\n//withRouter типизация\r\ntype PropsType = RouteComponentProps<PathParamsType> & MainContentConnectMapPropTypes;\r\n\r\n//withRouter возвращает новую компоненту!\r\n//это метод, который позволяет следить за изменением URL\r\n/*let WithURLDataContainerComponent = withRouter(MainContentContainer)\r\n\r\n\r\nexport default withAuthRedirect(connect(MapStateToProps, {\r\n    setUserProfile,\r\n    getUsersProfile: getUserProfileThunkCreator\r\n})(WithURLDataContainerComponent));*/\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(MapStateToProps, {\r\n        setUserProfile,\r\n        getUsersProfile: getUserProfileThunkCreator,\r\n        getUserStatus: getUserStatusTC,\r\n        updateUserStatus: updateUserStatusTC\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(MainContentContainer)","import s from \"./DialogsItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {DialogItemPropTypes} from \"../../../redux/dialogsPage_reducer\";\r\n\r\nexport const DialogItem = (props: DialogItemPropTypes) => {\r\n    return (\r\n\r\n        <div>\r\n\r\n            <div className={`${s.dialog} ${s.active}`}>\r\n                <NavLink to={\"/dialogsPage/\" + props.id}>\r\n                    <div className={s.user}>\r\n                        <div><img className={s.userAvatar} src={props.avatar} alt=\"avatar\"/></div>\r\n                        <div className={s.userName}>{props.name}</div>\r\n\r\n                    </div>\r\n\r\n                </NavLink>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}","import s from \"./Message.module.css\";\r\nimport React from \"react\";\r\n\r\nexport type MessagePropTypes = {\r\n    id: number,\r\n    message: string\r\n}\r\nexport const Message = (props: MessagePropTypes) => {\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.message}>{props.message}</div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport {DialogItem} from \"./DialogsItem/DialogsItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsConnectMapPropTypes} from \"./DialogsContainer\";\r\nimport {Field, Formik, FormikErrors} from \"formik\";\r\n\r\n\r\nexport const Dialogs: React.FC<DialogsConnectMapPropTypes> = (props) => {\r\n\r\n    const dialogsElements = props.dialogsData.map(d => <DialogItem key={d.id}\r\n                                                                   name={d.name}\r\n                                                                   id={d.id}\r\n                                                                   avatar={d.avatar}/>);\r\n    const messagesElements = props.messagesDataPosts.map(m => <Message key={m.id}\r\n                                                                       id={m.id}\r\n                                                                       message={m.message}/>)\r\n    return (\r\n        <div className={s.tableDialogs}>\r\n            <div className={s.dialogsItems}>\r\n                <div>{dialogsElements}</div>\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageForm callback={props.addMessage} buttonTitle={\"Send Message\"}/>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\ntype AddMessageFormType = {\r\n    callback: (newMessage: string) => void,\r\n    buttonTitle: string,\r\n}\r\ntype FormValues = {\r\n    message: string\r\n}\r\nconst AddMessageForm: React.FC<AddMessageFormType> = (props) => {\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{message: ''}}\r\n            validate={values => {\r\n                let errors: FormikErrors<FormValues> = {};\r\n                if (!values.message) {\r\n                    errors.message = \"Required\";\r\n                } else if (values.message.length > 30) {\r\n                    errors.message = \"Message must be less 30 symbols\"\r\n                }\r\n\r\n                return errors;\r\n            }}\r\n            onSubmit={(values, {setSubmitting}) => {\r\n                alert(JSON.stringify(values));\r\n                setSubmitting(false);\r\n                props.callback(values.message)\r\n            }}\r\n        >\r\n            {({\r\n                  values,\r\n                  errors,\r\n                  touched,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                  isSubmitting,\r\n                  /* and other goodies */\r\n              }) => (\r\n                <form onSubmit={handleSubmit}>\r\n                    {/*свойство нэйм, это то, что мы туда запихиваем!*/}\r\n                    <Field style={errors.message && touched.message && {border: '1px solid red'}}\r\n                           name={\"message\"}\r\n                           component={\"textarea\"}\r\n                           onChange={handleChange}\r\n                           onBlur={handleBlur}\r\n                           value={values.message}/>\r\n                    {touched.message && errors.message && <div className={s.errorText}>{errors.message}</div>}\r\n\r\n                    <div>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            {props.buttonTitle}\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    addMessage,\r\n\r\n    DialogItemPropTypes,\r\n    MessagePropTypes,\r\n} from \"../../redux/dialogsPage_reducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nclass DialogsContainer extends React.Component<DialogsConnectMapPropTypes> {\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Dialogs dialogsData={this.props.dialogsData}\r\n                         messagesDataPosts={this.props.messagesDataPosts}\r\n                         addMessage={this.props.addMessage}/>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\ntype MapStatePropTypes = {\r\n    dialogsData: Array<DialogItemPropTypes>,\r\n    messagesDataPosts: Array<MessagePropTypes>,\r\n}\r\n\r\nlet MapStateToProps = (state: AppStateType): MapStatePropTypes => {\r\n    return {\r\n        dialogsData: state.dialogsPage.dialogsData,\r\n        messagesDataPosts: state.dialogsPage.messagesDataPosts,\r\n    }\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (newMessage:string) => void,\r\n}\r\n\r\nexport type DialogsConnectMapPropTypes = MapStatePropTypes & MapDispatchToPropsType;\r\n\r\n/*export default withAuthRedirect(connect(MapStateToProps, {addMessage, changeNewMessageCallback})(DialogsContainer))*/\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(MapStateToProps, {addMessage}),\r\n    withAuthRedirect\r\n)(DialogsContainer)","import React from \"react\";\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {HeaderConnectMapPropTypes} from \"./HeaderContainer\";\r\n\r\nexport const Header: React.FC<HeaderConnectMapPropTypes> = (props) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQjwmALuU19xPRQx_5_ZQK8QqG5HpA79AD5Iw&usqp=CAU'\r\n                alt=\"nothingSpecial\"/>\r\n            <div className={s.loginBlock}>\r\n\r\n\r\n                {props.authUsersData.isAuth\r\n                    ? <div>{props.authUsersData.login} - <button onClick={props.logOut}>Log Out</button></div>\r\n                    : <NavLink to={\"/authMe\"}>Login</NavLink>}\r\n\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {Header} from \"./Header\";\r\nimport {AuthPropTypes, logOut, setAuthUserData} from \"../../redux/auth_reducer\";\r\nimport {compose} from \"redux\";\r\n\r\nclass HeaderContainer extends React.Component<HeaderConnectMapPropTypes> {\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Header {...this.props}/>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\ntype MapStatePropTypes = {\r\n    authUsersData: AuthPropTypes,\r\n\r\n}\r\n\r\nlet MapStateToProps = (state: AppStateType): MapStatePropTypes => {\r\n    return {\r\n        authUsersData: state.auth\r\n    }\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    setAuthUserData: (userId: number, login: string, email: string,) => void,\r\n    logOut: () => void\r\n}\r\n\r\nexport type HeaderConnectMapPropTypes = MapStatePropTypes & MapDispatchToPropsType;\r\n\r\n/*export default connect(MapStateToProps, {setAuthUserData, authMe:getAuthUserData})(HeaderContainer)*/\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(MapStateToProps,\r\n        {setAuthUserData,logOut}))\r\n(HeaderContainer);\r\n","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Field, Formik, FormikErrors} from \"formik\";\r\nimport {logIn} from \"../../redux/auth_reducer\";\r\nimport s from \"./Login.module.css\";\r\nimport {store} from \"../../redux/reduxStore\";\r\n\r\n\r\ntype FormValues = {\r\n    email: string,\r\n    password: string,\r\n}\r\n\r\nexport const LoginForm: React.FC = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    //если нам приходит некорректный ответ от сервера\r\n    const errorMessageFromServer = useSelector(() => store.getState().auth.authError);\r\n\r\n    return (<Formik\r\n        initialValues={{email: '', password: '', rememberMe: false}}\r\n        validate={(values) => {\r\n            let errors: FormikErrors<FormValues> = {};\r\n            if (!values.email) {\r\n                errors.email = \"Required\";\r\n            } /*else if (values.email.length < 5) {\r\n                errors.email = \"Email must be more then 5 symbols\"\r\n            }*/\r\n\r\n            if (!values.password) {\r\n                errors.password = \"Required\";\r\n            } /*else if (values.password.length < 5) {\r\n                errors.password = \"Password must be more then 5 symbols\"\r\n            }*/\r\n\r\n            return errors;\r\n        }}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            alert(JSON.stringify(values, null, 2));\r\n            setSubmitting(false);\r\n            dispatch(logIn(values.email, values.password, values.rememberMe));\r\n            debugger\r\n        }}\r\n    >\r\n        {({\r\n              values,\r\n              errors,\r\n              touched,\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              isSubmitting,\r\n              /* and other goodies */\r\n          }) => (\r\n            <form onSubmit={handleSubmit}>\r\n\r\n                <div>Email</div>\r\n                <input className={errors.email ? s.errorInput : \"\"}\r\n                       type=\"email\"\r\n                       name=\"email\"\r\n                       onChange={handleChange}\r\n                       onBlur={handleBlur}\r\n                       value={values.email}\r\n                />\r\n                {touched.email && errors.email && <div className={s.errorText}>{errors.email}</div>}\r\n                <div>Password</div>\r\n                <input className={errors.password ? s.errorInput : \"\"}\r\n                       type=\"password\"\r\n                       name=\"password\"\r\n                       onChange={handleChange}\r\n                       onBlur={handleBlur}\r\n                       value={values.password}\r\n                />\r\n                {touched.password && errors.password && <div className={s.errorText}>{errors.password}</div>}\r\n\r\n\r\n                <div>\r\n                    <Field type=\"checkbox\" name=\"rememberMe\"/>\r\n                    <label>Remember Me</label>\r\n\r\n                </div>\r\n                <div className={s.errorText}>{errorMessageFromServer}</div>\r\n                <div>\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Submit\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        )}\r\n    </Formik>)\r\n}","\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {logIn} from \"../../redux/auth_reducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {LoginForm} from \"./LoginForm\";\r\n\r\n\r\nconst Login: React.FC<LoginContainerPropTypes> = (props) => {\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>LOGIN</h1>\r\n            <LoginForm/>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport type LoginContainerPropTypes = MapDispatchToPropsType & MapStatePropTypes;\r\n\r\nexport type MapDispatchToPropsType = {\r\n    logIn: (email: string, password: string, rememberMe: boolean) => void,\r\n}\r\n\r\ntype MapStatePropTypes = {\r\n    isAuth: boolean,\r\n}\r\n\r\nlet MapStateToProps = (state: AppStateType): MapStatePropTypes => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n\r\n    }\r\n}\r\nexport default connect(MapStateToProps, {logIn})(Login)","import React from 'react';\nimport './App.css';\nimport {News} from \"./components/News/News\";\nimport {Music} from \"./components/Music/Music\";\nimport {Settings} from \"./components/Settings/Settings\";\nimport {BrowserRouter, Route, withRouter} from \"react-router-dom\";\nimport {NavigationBar} from \"./components/NavigationBar/NavigationBar\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport MainContentContainer from \"./components/MainContent/ProfileInfo/MainContentContainer\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {initializeApp} from \"./redux/app_reducer\";\nimport {AppStateType} from \"./redux/reduxStore\";\nimport {Preloader} from \"./components/common/Preloader/Preloader\";\n\nexport class App extends React.Component<AppContainerPropTypes> {\n\n\n    componentDidMount() {\n        this.props.initializeApp();\n    }\n\n\n    render() {\n        if (!this.props.initialized) {\n            <Preloader/>\n        }\n            return (\n                <BrowserRouter>\n                    <div className='app-wrapper'>\n                        <HeaderContainer/>\n                        <NavigationBar/>\n                        <div className='app-wrapper-content'>\n                            <Route path='/profile/:userId?'\n                                   render={() => <MainContentContainer/>}/>\n                            <Route path='/dialogsPage' render={() => <DialogsContainer/>}/>\n                            <Route path='/news' component={News}/>\n                            <Route path='/music' component={Music}/>\n                            <Route path='/settings' component={Settings}/>\n                            <Route path='/users' render={() => <UsersContainer/>}/>\n                            <Route path='/authMe' render={() => <Login/>}/>\n\n                        </div>\n                    </div>\n                </BrowserRouter>\n            );\n    }\n}\n\nexport type AppContainerPropTypes = MapDispatchToPropsType & MapStatePropTypes;\n\ntype MapDispatchToPropsType = {\n    initializeApp: () => void,\n}\nlet MapStateToProps = (state: AppStateType): MapStatePropTypes => {\n    return {\n        initialized: state.app.initialized\n    }\n}\ntype MapStatePropTypes = {\n    initialized: boolean,\n}\n\nexport default compose<React.ComponentType>(withRouter, connect(MapStateToProps, {initializeApp}))(App)","import './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {store} from \"./redux/reduxStore\"\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport AppContainer from \"./App\";\n\nReactDOM.render(\n    <BrowserRouter>\n\n        <Provider store={store}>\n            <AppContainer />\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}